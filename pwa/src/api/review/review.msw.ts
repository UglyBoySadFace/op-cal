/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { ApiReviewsGetCollection200, ReviewJsonld } from ".././models";

export const getApiReviewsGetCollectionResponseMock = (
  overrideResponse: Partial<ApiReviewsGetCollection200> = {},
): ApiReviewsGetCollection200 => ({
  member: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    "@context": faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        {
          "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
          hydra: faker.helpers.arrayElement([
            "http://www.w3.org/ns/hydra/core#",
          ] as const),
        },
      ]),
      undefined,
    ]),
    "@id": faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    "@type": faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    author: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    book: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    body: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  })),
  totalItems: faker.helpers.arrayElement([
    faker.number.int({ min: 0, max: undefined }),
    undefined,
  ]),
  view: faker.helpers.arrayElement([
    {
      "@id": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      "@type": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      first: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      last: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      previous: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      next: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  search: faker.helpers.arrayElement([
    {
      "@type": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      template: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      variableRepresentation: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      mapping: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          "@type": faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          variable: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          property: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          required: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiReviewsPostResponseMock = (
  overrideResponse: Partial<ReviewJsonld> = {},
): ReviewJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  book: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiReviewsIdGetResponseMock = (
  overrideResponse: Partial<ReviewJsonld> = {},
): ReviewJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  book: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiReviewsIdPatchResponseMock = (
  overrideResponse: Partial<ReviewJsonld> = {},
): ReviewJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  book: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiReviewsGetCollectionMockHandler = (
  overrideResponse?:
    | ApiReviewsGetCollection200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ApiReviewsGetCollection200> | ApiReviewsGetCollection200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/reviews",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiReviewsGetCollectionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiReviewsPostMockHandler = (
  overrideResponse?:
    | ReviewJsonld
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ReviewJsonld> | ReviewJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/reviews",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiReviewsPostResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiReviewsIdGetMockHandler = (
  overrideResponse?:
    | ReviewJsonld
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ReviewJsonld> | ReviewJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/reviews/:id",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiReviewsIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiReviewsIdDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/reviews/:id",
    async (info) => {
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getApiReviewsIdPatchMockHandler = (
  overrideResponse?:
    | ReviewJsonld
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ReviewJsonld> | ReviewJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/reviews/:id",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiReviewsIdPatchResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getReviewMock = () => [
  getApiReviewsGetCollectionMockHandler(),
  getApiReviewsPostMockHandler(),
  getApiReviewsIdGetMockHandler(),
  getApiReviewsIdDeleteMockHandler(),
  getApiReviewsIdPatchMockHandler(),
];
