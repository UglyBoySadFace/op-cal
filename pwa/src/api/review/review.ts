/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import type {
  ApiReviewsGetCollection200,
  ApiReviewsGetCollectionParams,
  ConstraintViolationJson,
  ConstraintViolationJsonldJsonld,
  Error,
  ErrorJsonld,
  Review,
  ReviewJsonld,
} from ".././models";

import { customFetch } from ".././custom-fetch";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

/**
 * Retrieves the collection of Review resources.
 * @summary Retrieves the collection of Review resources.
 */
export type apiReviewsGetCollectionResponse200 = {
  data: ApiReviewsGetCollection200;
  status: 200;
};

export type apiReviewsGetCollectionResponseSuccess =
  apiReviewsGetCollectionResponse200 & {
    headers: Headers;
  };
export type apiReviewsGetCollectionResponse =
  apiReviewsGetCollectionResponseSuccess;

export const getApiReviewsGetCollectionUrl = (
  params?: ApiReviewsGetCollectionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://localhost:3000/reviews?${stringifiedParams}`
    : `https://localhost:3000/reviews`;
};

export const apiReviewsGetCollection = async (
  params?: ApiReviewsGetCollectionParams,
  options?: RequestInit,
): Promise<apiReviewsGetCollectionResponse> => {
  return customFetch<apiReviewsGetCollectionResponse>(
    getApiReviewsGetCollectionUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Creates a Review resource.
 * @summary Creates a Review resource.
 */
export type apiReviewsPostResponse201 = {
  data: ReviewJsonld;
  status: 201;
};

export type apiReviewsPostResponse400ApplicationLdJson = {
  data: ErrorJsonld;
  status: 400;
};

export type apiReviewsPostResponse400ApplicationProblemJson = {
  data: Error;
  status: 400;
};

export type apiReviewsPostResponse422ApplicationLdJson = {
  data: ConstraintViolationJsonldJsonld;
  status: 422;
};

export type apiReviewsPostResponse422ApplicationProblemJson = {
  data: ConstraintViolationJson;
  status: 422;
};

export type apiReviewsPostResponseSuccess = apiReviewsPostResponse201 & {
  headers: Headers;
};
export type apiReviewsPostResponseError = (
  | apiReviewsPostResponse400ApplicationLdJson
  | apiReviewsPostResponse400ApplicationProblemJson
  | apiReviewsPostResponse422ApplicationLdJson
  | apiReviewsPostResponse422ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiReviewsPostResponse =
  | apiReviewsPostResponseSuccess
  | apiReviewsPostResponseError;

export const getApiReviewsPostUrl = () => {
  return `https://localhost:3000/reviews`;
};

export const apiReviewsPost = async (
  reviewJsonld: NonReadonly<ReviewJsonld>,
  options?: RequestInit,
): Promise<apiReviewsPostResponse> => {
  return customFetch<apiReviewsPostResponse>(getApiReviewsPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/ld+json", ...options?.headers },
    body: JSON.stringify(reviewJsonld),
  });
};

/**
 * Retrieves a Review resource.
 * @summary Retrieves a Review resource.
 */
export type apiReviewsIdGetResponse200 = {
  data: ReviewJsonld;
  status: 200;
};

export type apiReviewsIdGetResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiReviewsIdGetResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiReviewsIdGetResponseSuccess = apiReviewsIdGetResponse200 & {
  headers: Headers;
};
export type apiReviewsIdGetResponseError = (
  | apiReviewsIdGetResponse404ApplicationLdJson
  | apiReviewsIdGetResponse404ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiReviewsIdGetResponse =
  | apiReviewsIdGetResponseSuccess
  | apiReviewsIdGetResponseError;

export const getApiReviewsIdGetUrl = (id: string) => {
  return `https://localhost:3000/reviews/${id}`;
};

export const apiReviewsIdGet = async (
  id: string,
  options?: RequestInit,
): Promise<apiReviewsIdGetResponse> => {
  return customFetch<apiReviewsIdGetResponse>(getApiReviewsIdGetUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Removes the Review resource.
 * @summary Removes the Review resource.
 */
export type apiReviewsIdDeleteResponse204 = {
  data: void;
  status: 204;
};

export type apiReviewsIdDeleteResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiReviewsIdDeleteResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiReviewsIdDeleteResponseSuccess =
  apiReviewsIdDeleteResponse204 & {
    headers: Headers;
  };
export type apiReviewsIdDeleteResponseError = (
  | apiReviewsIdDeleteResponse404ApplicationLdJson
  | apiReviewsIdDeleteResponse404ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiReviewsIdDeleteResponse =
  | apiReviewsIdDeleteResponseSuccess
  | apiReviewsIdDeleteResponseError;

export const getApiReviewsIdDeleteUrl = (id: string) => {
  return `https://localhost:3000/reviews/${id}`;
};

export const apiReviewsIdDelete = async (
  id: string,
  options?: RequestInit,
): Promise<apiReviewsIdDeleteResponse> => {
  return customFetch<apiReviewsIdDeleteResponse>(getApiReviewsIdDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

/**
 * Updates the Review resource.
 * @summary Updates the Review resource.
 */
export type apiReviewsIdPatchResponse200 = {
  data: ReviewJsonld;
  status: 200;
};

export type apiReviewsIdPatchResponse400ApplicationLdJson = {
  data: ErrorJsonld;
  status: 400;
};

export type apiReviewsIdPatchResponse400ApplicationProblemJson = {
  data: Error;
  status: 400;
};

export type apiReviewsIdPatchResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiReviewsIdPatchResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiReviewsIdPatchResponse422ApplicationLdJson = {
  data: ConstraintViolationJsonldJsonld;
  status: 422;
};

export type apiReviewsIdPatchResponse422ApplicationProblemJson = {
  data: ConstraintViolationJson;
  status: 422;
};

export type apiReviewsIdPatchResponseSuccess = apiReviewsIdPatchResponse200 & {
  headers: Headers;
};
export type apiReviewsIdPatchResponseError = (
  | apiReviewsIdPatchResponse400ApplicationLdJson
  | apiReviewsIdPatchResponse400ApplicationProblemJson
  | apiReviewsIdPatchResponse404ApplicationLdJson
  | apiReviewsIdPatchResponse404ApplicationProblemJson
  | apiReviewsIdPatchResponse422ApplicationLdJson
  | apiReviewsIdPatchResponse422ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiReviewsIdPatchResponse =
  | apiReviewsIdPatchResponseSuccess
  | apiReviewsIdPatchResponseError;

export const getApiReviewsIdPatchUrl = (id: string) => {
  return `https://localhost:3000/reviews/${id}`;
};

export const apiReviewsIdPatch = async (
  id: string,
  review: NonReadonly<Review>,
  options?: RequestInit,
): Promise<apiReviewsIdPatchResponse> => {
  return customFetch<apiReviewsIdPatchResponse>(getApiReviewsIdPatchUrl(id), {
    ...options,
    method: "PATCH",
    headers: {
      "Content-Type": "application/merge-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(review),
  });
};
