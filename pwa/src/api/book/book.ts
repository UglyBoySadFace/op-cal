/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ApiBooksGetCollection200,
  ApiBooksGetCollectionParams,
  Book,
  BookJsonld,
  ConstraintViolationJson,
  ConstraintViolationJsonldJsonld,
  Error,
  ErrorJsonld,
} from ".././models";

import { customFetch } from ".././custom-fetch";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves the collection of Book resources.
 * @summary Retrieves the collection of Book resources.
 */
export type apiBooksGetCollectionResponse200 = {
  data: ApiBooksGetCollection200;
  status: 200;
};

export type apiBooksGetCollectionResponseSuccess =
  apiBooksGetCollectionResponse200 & {
    headers: Headers;
  };
export type apiBooksGetCollectionResponse =
  apiBooksGetCollectionResponseSuccess;

export const getApiBooksGetCollectionUrl = (
  params?: ApiBooksGetCollectionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:3000/books?${stringifiedParams}`
    : `http://localhost:3000/books`;
};

export const apiBooksGetCollection = async (
  params?: ApiBooksGetCollectionParams,
  options?: RequestInit,
): Promise<apiBooksGetCollectionResponse> => {
  return customFetch<apiBooksGetCollectionResponse>(
    getApiBooksGetCollectionUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getApiBooksGetCollectionQueryKey = (
  params?: ApiBooksGetCollectionParams,
) => {
  return [`http://localhost:3000/books`, ...(params ? [params] : [])] as const;
};

export const getApiBooksGetCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof apiBooksGetCollection>>,
  TError = unknown,
>(
  params?: ApiBooksGetCollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiBooksGetCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiBooksGetCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiBooksGetCollection>>
  > = ({ signal }) =>
    apiBooksGetCollection(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiBooksGetCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiBooksGetCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiBooksGetCollection>>
>;
export type ApiBooksGetCollectionQueryError = unknown;

export function useApiBooksGetCollection<
  TData = Awaited<ReturnType<typeof apiBooksGetCollection>>,
  TError = unknown,
>(
  params: undefined | ApiBooksGetCollectionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiBooksGetCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiBooksGetCollection>>,
          TError,
          Awaited<ReturnType<typeof apiBooksGetCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiBooksGetCollection<
  TData = Awaited<ReturnType<typeof apiBooksGetCollection>>,
  TError = unknown,
>(
  params?: ApiBooksGetCollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiBooksGetCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiBooksGetCollection>>,
          TError,
          Awaited<ReturnType<typeof apiBooksGetCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiBooksGetCollection<
  TData = Awaited<ReturnType<typeof apiBooksGetCollection>>,
  TError = unknown,
>(
  params?: ApiBooksGetCollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiBooksGetCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves the collection of Book resources.
 */

export function useApiBooksGetCollection<
  TData = Awaited<ReturnType<typeof apiBooksGetCollection>>,
  TError = unknown,
>(
  params?: ApiBooksGetCollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiBooksGetCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiBooksGetCollectionQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a Book resource.
 * @summary Creates a Book resource.
 */
export type apiBooksPostResponse201 = {
  data: BookJsonld;
  status: 201;
};

export type apiBooksPostResponse400ApplicationLdJson = {
  data: ErrorJsonld;
  status: 400;
};

export type apiBooksPostResponse400ApplicationProblemJson = {
  data: Error;
  status: 400;
};

export type apiBooksPostResponse422ApplicationLdJson = {
  data: ConstraintViolationJsonldJsonld;
  status: 422;
};

export type apiBooksPostResponse422ApplicationProblemJson = {
  data: ConstraintViolationJson;
  status: 422;
};

export type apiBooksPostResponseSuccess = apiBooksPostResponse201 & {
  headers: Headers;
};
export type apiBooksPostResponseError = (
  | apiBooksPostResponse400ApplicationLdJson
  | apiBooksPostResponse400ApplicationProblemJson
  | apiBooksPostResponse422ApplicationLdJson
  | apiBooksPostResponse422ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiBooksPostResponse =
  | apiBooksPostResponseSuccess
  | apiBooksPostResponseError;

export const getApiBooksPostUrl = () => {
  return `http://localhost:3000/books`;
};

export const apiBooksPost = async (
  bookJsonld: NonReadonly<BookJsonld>,
  options?: RequestInit,
): Promise<apiBooksPostResponse> => {
  return customFetch<apiBooksPostResponse>(getApiBooksPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/ld+json", ...options?.headers },
    body: JSON.stringify(bookJsonld),
  });
};

export const getApiBooksPostMutationOptions = <
  TError =
    | ErrorJsonld
    | Error
    | ConstraintViolationJsonldJsonld
    | ConstraintViolationJson,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiBooksPost>>,
    TError,
    { data: NonReadonly<BookJsonld> },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiBooksPost>>,
  TError,
  { data: NonReadonly<BookJsonld> },
  TContext
> => {
  const mutationKey = ["apiBooksPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiBooksPost>>,
    { data: NonReadonly<BookJsonld> }
  > = (props) => {
    const { data } = props ?? {};

    return apiBooksPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiBooksPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiBooksPost>>
>;
export type ApiBooksPostMutationBody = NonReadonly<BookJsonld>;
export type ApiBooksPostMutationError =
  | ErrorJsonld
  | Error
  | ConstraintViolationJsonldJsonld
  | ConstraintViolationJson;

/**
 * @summary Creates a Book resource.
 */
export const useApiBooksPost = <
  TError =
    | ErrorJsonld
    | Error
    | ConstraintViolationJsonldJsonld
    | ConstraintViolationJson,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof apiBooksPost>>,
      TError,
      { data: NonReadonly<BookJsonld> },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof apiBooksPost>>,
  TError,
  { data: NonReadonly<BookJsonld> },
  TContext
> => {
  const mutationOptions = getApiBooksPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves a Book resource.
 * @summary Retrieves a Book resource.
 */
export type apiBooksIdGetResponse200 = {
  data: BookJsonld;
  status: 200;
};

export type apiBooksIdGetResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiBooksIdGetResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiBooksIdGetResponseSuccess = apiBooksIdGetResponse200 & {
  headers: Headers;
};
export type apiBooksIdGetResponseError = (
  | apiBooksIdGetResponse404ApplicationLdJson
  | apiBooksIdGetResponse404ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiBooksIdGetResponse =
  | apiBooksIdGetResponseSuccess
  | apiBooksIdGetResponseError;

export const getApiBooksIdGetUrl = (id: string) => {
  return `http://localhost:3000/books/${id}`;
};

export const apiBooksIdGet = async (
  id: string,
  options?: RequestInit,
): Promise<apiBooksIdGetResponse> => {
  return customFetch<apiBooksIdGetResponse>(getApiBooksIdGetUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getApiBooksIdGetQueryKey = (id?: string) => {
  return [`http://localhost:3000/books/${id}`] as const;
};

export const getApiBooksIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiBooksIdGet>>,
  TError = ErrorJsonld | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiBooksIdGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiBooksIdGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiBooksIdGet>>> = ({
    signal,
  }) => apiBooksIdGet(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiBooksIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiBooksIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiBooksIdGet>>
>;
export type ApiBooksIdGetQueryError = ErrorJsonld | Error;

export function useApiBooksIdGet<
  TData = Awaited<ReturnType<typeof apiBooksIdGet>>,
  TError = ErrorJsonld | Error,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiBooksIdGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiBooksIdGet>>,
          TError,
          Awaited<ReturnType<typeof apiBooksIdGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiBooksIdGet<
  TData = Awaited<ReturnType<typeof apiBooksIdGet>>,
  TError = ErrorJsonld | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiBooksIdGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiBooksIdGet>>,
          TError,
          Awaited<ReturnType<typeof apiBooksIdGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiBooksIdGet<
  TData = Awaited<ReturnType<typeof apiBooksIdGet>>,
  TError = ErrorJsonld | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiBooksIdGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieves a Book resource.
 */

export function useApiBooksIdGet<
  TData = Awaited<ReturnType<typeof apiBooksIdGet>>,
  TError = ErrorJsonld | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiBooksIdGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiBooksIdGetQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Removes the Book resource.
 * @summary Removes the Book resource.
 */
export type apiBooksIdDeleteResponse204 = {
  data: void;
  status: 204;
};

export type apiBooksIdDeleteResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiBooksIdDeleteResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiBooksIdDeleteResponseSuccess = apiBooksIdDeleteResponse204 & {
  headers: Headers;
};
export type apiBooksIdDeleteResponseError = (
  | apiBooksIdDeleteResponse404ApplicationLdJson
  | apiBooksIdDeleteResponse404ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiBooksIdDeleteResponse =
  | apiBooksIdDeleteResponseSuccess
  | apiBooksIdDeleteResponseError;

export const getApiBooksIdDeleteUrl = (id: string) => {
  return `http://localhost:3000/books/${id}`;
};

export const apiBooksIdDelete = async (
  id: string,
  options?: RequestInit,
): Promise<apiBooksIdDeleteResponse> => {
  return customFetch<apiBooksIdDeleteResponse>(getApiBooksIdDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getApiBooksIdDeleteMutationOptions = <
  TError = ErrorJsonld | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiBooksIdDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiBooksIdDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["apiBooksIdDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiBooksIdDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return apiBooksIdDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiBooksIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiBooksIdDelete>>
>;

export type ApiBooksIdDeleteMutationError = ErrorJsonld | Error;

/**
 * @summary Removes the Book resource.
 */
export const useApiBooksIdDelete = <
  TError = ErrorJsonld | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof apiBooksIdDelete>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof apiBooksIdDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getApiBooksIdDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Updates the Book resource.
 * @summary Updates the Book resource.
 */
export type apiBooksIdPatchResponse200 = {
  data: BookJsonld;
  status: 200;
};

export type apiBooksIdPatchResponse400ApplicationLdJson = {
  data: ErrorJsonld;
  status: 400;
};

export type apiBooksIdPatchResponse400ApplicationProblemJson = {
  data: Error;
  status: 400;
};

export type apiBooksIdPatchResponse404ApplicationLdJson = {
  data: ErrorJsonld;
  status: 404;
};

export type apiBooksIdPatchResponse404ApplicationProblemJson = {
  data: Error;
  status: 404;
};

export type apiBooksIdPatchResponse422ApplicationLdJson = {
  data: ConstraintViolationJsonldJsonld;
  status: 422;
};

export type apiBooksIdPatchResponse422ApplicationProblemJson = {
  data: ConstraintViolationJson;
  status: 422;
};

export type apiBooksIdPatchResponseSuccess = apiBooksIdPatchResponse200 & {
  headers: Headers;
};
export type apiBooksIdPatchResponseError = (
  | apiBooksIdPatchResponse400ApplicationLdJson
  | apiBooksIdPatchResponse400ApplicationProblemJson
  | apiBooksIdPatchResponse404ApplicationLdJson
  | apiBooksIdPatchResponse404ApplicationProblemJson
  | apiBooksIdPatchResponse422ApplicationLdJson
  | apiBooksIdPatchResponse422ApplicationProblemJson
) & {
  headers: Headers;
};

export type apiBooksIdPatchResponse =
  | apiBooksIdPatchResponseSuccess
  | apiBooksIdPatchResponseError;

export const getApiBooksIdPatchUrl = (id: string) => {
  return `http://localhost:3000/books/${id}`;
};

export const apiBooksIdPatch = async (
  id: string,
  book: NonReadonly<Book>,
  options?: RequestInit,
): Promise<apiBooksIdPatchResponse> => {
  return customFetch<apiBooksIdPatchResponse>(getApiBooksIdPatchUrl(id), {
    ...options,
    method: "PATCH",
    headers: {
      "Content-Type": "application/merge-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(book),
  });
};

export const getApiBooksIdPatchMutationOptions = <
  TError =
    | ErrorJsonld
    | Error
    | ConstraintViolationJsonldJsonld
    | ConstraintViolationJson,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiBooksIdPatch>>,
    TError,
    { id: string; data: NonReadonly<Book> },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiBooksIdPatch>>,
  TError,
  { id: string; data: NonReadonly<Book> },
  TContext
> => {
  const mutationKey = ["apiBooksIdPatch"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiBooksIdPatch>>,
    { id: string; data: NonReadonly<Book> }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiBooksIdPatch(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiBooksIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiBooksIdPatch>>
>;
export type ApiBooksIdPatchMutationBody = NonReadonly<Book>;
export type ApiBooksIdPatchMutationError =
  | ErrorJsonld
  | Error
  | ConstraintViolationJsonldJsonld
  | ConstraintViolationJson;

/**
 * @summary Updates the Book resource.
 */
export const useApiBooksIdPatch = <
  TError =
    | ErrorJsonld
    | Error
    | ConstraintViolationJsonldJsonld
    | ConstraintViolationJson,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof apiBooksIdPatch>>,
      TError,
      { id: string; data: NonReadonly<Book> },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof apiBooksIdPatch>>,
  TError,
  { id: string; data: NonReadonly<Book> },
  TContext
> => {
  const mutationOptions = getApiBooksIdPatchMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
