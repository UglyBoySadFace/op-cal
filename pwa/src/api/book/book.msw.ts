/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Hello API Platform
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { ApiBooksGetCollection200, BookJsonld } from ".././models";

export const getApiBooksGetCollectionResponseMock = (
  overrideResponse: Partial<ApiBooksGetCollection200> = {},
): ApiBooksGetCollection200 => ({
  member: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    "@context": faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        {
          "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
          hydra: faker.helpers.arrayElement([
            "http://www.w3.org/ns/hydra/core#",
          ] as const),
        },
      ]),
      undefined,
    ]),
    "@id": faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    "@type": faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    rating: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    body: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    author: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    reviews: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      undefined,
    ]),
  })),
  totalItems: faker.helpers.arrayElement([
    faker.number.int({ min: 0, max: undefined }),
    undefined,
  ]),
  view: faker.helpers.arrayElement([
    {
      "@id": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      "@type": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      first: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      last: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      previous: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      next: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  search: faker.helpers.arrayElement([
    {
      "@type": faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      template: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      variableRepresentation: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      mapping: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          "@type": faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          variable: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          property: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          required: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiBooksPostResponseMock = (
  overrideResponse: Partial<BookJsonld> = {},
): BookJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  reviews: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiBooksIdGetResponseMock = (
  overrideResponse: Partial<BookJsonld> = {},
): BookJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  reviews: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiBooksIdPatchResponseMock = (
  overrideResponse: Partial<BookJsonld> = {},
): BookJsonld => ({
  "@context": faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      {
        "@vocab": faker.string.alpha({ length: { min: 10, max: 20 } }),
        hydra: faker.helpers.arrayElement([
          "http://www.w3.org/ns/hydra/core#",
        ] as const),
      },
    ]),
    undefined,
  ]),
  "@id": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  "@type": faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  body: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  author: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  reviews: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getApiBooksGetCollectionMockHandler = (
  overrideResponse?:
    | ApiBooksGetCollection200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ApiBooksGetCollection200> | ApiBooksGetCollection200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/books",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiBooksGetCollectionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiBooksPostMockHandler = (
  overrideResponse?:
    | BookJsonld
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<BookJsonld> | BookJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/books",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiBooksPostResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiBooksIdGetMockHandler = (
  overrideResponse?:
    | BookJsonld
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<BookJsonld> | BookJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/books/:id",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiBooksIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getApiBooksIdDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/books/:id",
    async (info) => {
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getApiBooksIdPatchMockHandler = (
  overrideResponse?:
    | BookJsonld
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<BookJsonld> | BookJsonld),
  options?: RequestHandlerOptions,
) => {
  return http.patch(
    "*/books/:id",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getApiBooksIdPatchResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getBookMock = () => [
  getApiBooksGetCollectionMockHandler(),
  getApiBooksPostMockHandler(),
  getApiBooksIdGetMockHandler(),
  getApiBooksIdDeleteMockHandler(),
  getApiBooksIdPatchMockHandler(),
];
